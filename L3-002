#include <bits/stdc++.h>
using namespace std;
struct node
{
    int n;
    int d;
};
#define MAX 100001
int small[MAX];
void update(int cn,int ad)
{
    while(cn<MAX)
    {
        small[cn]+=ad;
        cn+=cn&(-cn);
    }
}
int sum(int cn)
{
    int s=0;
    while(cn>0)
    {
        s+=small[cn];
        cn-=cn&(-cn);
    }
    return s;
}
int main()
{
    int i,j,n,m,k,t,q,b,f,cn,dis,res;
    memset(small,0,sizeof(small));
    cin>>n;
    stack<int> que;
    while(!que.empty())
    {
        que.pop();
    }
    string st;
    for(i=0; i<n; i++)
    {
        cin>>st;
        if(st[1]=='u')
        {
            cin>>m;
            que.push(m);
            update(m,1);
        }
        if(st[1]=='o')
        {
            if(!que.empty())
            {
                cout<<que.top()<<endl;
                update(que.top(),-1);
                que.pop();
            }
            else
            {
                cout<<"Invalid"<<endl;
            }
        }
        if(st[1]=='e')
        {
            if(que.empty())
            {
                cout<<"Invalid"<<endl;
            }
            else
            {
                int l=1;
                int r=MAX-1;
                while(l<r)
                {
                    int mid=l+(r-l)/2;
                    if(que.size()%2==0)
                    {
                        if(sum(mid)>=que.size()/2)
                        {
                            r=mid;
                        }
                        else
                        {
                            l=mid+1;
                        }
                    }
                    else
                    {
                        if(sum(mid)>=(que.size()+1)/2)
                        {
                            r=mid;
                        }
                        else
                        {
                            l=mid+1;
                        }
                    }
//                    cout<<l<<' '<<r<<endl;
                }
                cout<<l<<endl;
            }
        }
    }
    return 0;
}
