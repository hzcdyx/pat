#include<iostream>
#include<bits/stdc++.h>
#include<math.h>
using namespace std;
const int maxn=100010;
int m,n,t=0;
int money[105];
int num[10010];
int flag=0;
void dfs(int k,int s)
{
    int i;
    if(flag==1)
    {
        return;
    }
    if(s>m)
    {
        return;
    }
    else if(s==m)
    {
        for(i=0; i<t; i++)
        {
            if(i!=0)
            {
                cout<<' ';
            }
            cout<<money[i];
        }
        flag=1;
        return;
    }
    else
    {
        if(k>=n)
        {
            return;
        }
        s+=num[k];
        money[t++]=num[k];
        dfs(k+1,s);
        money[--t]=0;
        s-=num[k];
        dfs(k+1,s);


    }
}

int main()
{
    int i,j,c,k,add,ne,da,nu=0;
    cin>>n>>m;
    for(i=0; i<n; i++)
    {
        cin>>num[i];
        nu+=num[i];
//        dp[i+1][num[i]]=1;
//        dp[i+1][0]=1;


    }
    memset(money,0,sizeof(money));
    if(nu<m)
    {
        cout<<"No Solution"<<endl;

    }
    else
    {
        sort(num,num+n);
        dfs(0,0);
        if(flag==0)
        {
             cout<<"No Solution"<<endl;
        }
    }

//    dp[0][0]=1;
//    for(i=1; i<n; i++)
//    {
//        for(j=0; j<101; j++)
//        {
//            if(j<num[i])
//            {
//                dp[i+1][j]=max(dp[i][j],dp[i+1][j]);
//
//            }
//            else
//            {
//                dp[i+1][j]=max(dp[i][j],dp[i+1][j]);
//                dp[i+1][j]=max(dp[i+1][j],dp[i][j-num[i]]);
//            }
//        }
//    }

    return 0;
}//ÇóËØÊýµÄ³ÌÐò
